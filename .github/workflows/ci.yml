name: CI

on:
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

jobs:    
  style:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
       java-version: 11
    - name: Cache maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-${{github.head_ref}}-style-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-${{github.head_ref}}-style-
    - name: Run style checks
      run: mvn -B checkstyle:check --file pom.xml

  license:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
       java-version: 11
    - name: Cache maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-${{github.head_ref}}-license-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-${{github.head_ref}}-license-
    - name: Run license checks
      run: mvn -B license:check --file pom.xml

  linting:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Lint Docker
      uses: hadolint/hadolint-action@v1.5.0
      with:
        dockerfile: Dockerfile
        config: .hadolint.yaml

  static-code-analysis:
    needs: [style, license, linting]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
       java-version: 11
    - name: Cache maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-${{github.head_ref}}-analysis-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-${{github.head_ref}}-analysis-
    - name: Run static code analysis
      run: mvn -B compile spotbugs:check --file pom.xml

  unit-and-integration-tests:
    needs: [style, license, linting]
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [11]

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Cache maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-${{github.head_ref}}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-${{github.head_ref}}-m2-
    - name: Unit- and Integrationtests
      run: mvn -B -U verify --file pom.xml -Prelease

  mutation-tests:
    needs: unit-and-integration-tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
       java-version: 11
    - name: Cache maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-${{github.head_ref}}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-${{github.head_ref}}-m2-
    - name: Run Mutation Tests
      run: mvn -B -Dmaven.javadoc.skip=true test org.pitest:pitest-maven:mutationCoverage --file pom.xml

  build-test-image:
    needs: unit-and-integration-tests
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Build artifact name
        id: get_artifact_name
        run: |
          IMAGE_ARTIFACT_NAME=$(echo "${GITHUB_HEAD_REF}" | sed 's_/_\-_g' )
          echo ::set-output name=IMAGE_ARTIFACT_NAME::"${IMAGE_ARTIFACT_NAME}"
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.get_artifact_name.outputs.IMAGE_ARTIFACT_NAME }}-image
        continue-on-error: true
      - name: Load image into docker
        run: docker load --input "${GITHUB_WORKSPACE}/${ARTIFACT}.tar"
        env:
          ARTIFACT: ${{ steps.get_artifact_name.outputs.IMAGE_ARTIFACT_NAME }}
      - name: Build registry path
        id: get_repo
        run: echo ::set-output name=IMAGE::"ghcr.io/international-data-spaces-association/dataspace-connector"
      - name: Build image
        run: |
          docker build . -t $IMAGE:ci
        env:
          IMAGE: ${{ steps.get_repo.outputs.IMAGE }}
          DOCKER_BUILDKIT: 1
      - name: Build tar ball
        id: build_tar_ball
        run: |
          docker save --output "${ARTIFACT}.tar" "${IMAGE}:ci"
        env:
          IMAGE: ${{ steps.get_repo.outputs.IMAGE }}
          ARTIFACT: ${{ steps.get_artifact_name.outputs.IMAGE_ARTIFACT_NAME }}
      - name: Push image
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.get_artifact_name.outputs.IMAGE_ARTIFACT_NAME }}-image
          path: ${{ github.workspace }}/${{ steps.get_artifact_name.outputs.IMAGE_ARTIFACT_NAME }}.tar
          retention-days: 1

  image-security-scan:
    needs: build-test-image
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Build artifact name
        id: get_artifact_name
        run: |
          IMAGE_ARTIFACT_NAME=$(echo "${GITHUB_HEAD_REF}" | sed 's_/_\-_g' )
          echo ::set-output name=IMAGE_ARTIFACT_NAME::"${IMAGE_ARTIFACT_NAME}"
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.get_artifact_name.outputs.IMAGE_ARTIFACT_NAME }}-image
      - name: Load image into docker
        run: |
          if [ -f "${GITHUB_WORKSPACE}/${ARTIFACT}.tar" ]; then
            docker load --input "${GITHUB_WORKSPACE}/${ARTIFACT}.tar"
          fi
        env:
          ARTIFACT: ${{ steps.get_artifact_name.outputs.IMAGE_ARTIFACT_NAME }}
      - name: Build registry path
        id: get_repo
        run: echo ::set-output name=IMAGE::"ghcr.io/international-data-spaces-association/dataspace-connector"
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: .trivy
          key: ${{ runner.os }}-trivy-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-trivy-
      - name: Run vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.get_repo.outputs.IMAGE }}:ci'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          cache-dir: .trivy
      - name: Correct Trivy cache permissions # See: https://github.com/aquasecurity/trivy-action/issues/12#issuecomment-847854159
        run: sudo chown -R $USER:$GROUP .trivy

  e2e-test:
    needs: build-test-image
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build artifact name
        id: get_artifact_name
        run: |
          IMAGE_ARTIFACT_NAME=$(echo "${GITHUB_HEAD_REF}" | sed 's_/_\-_g' )
          echo ::set-output name=IMAGE_ARTIFACT_NAME::"${IMAGE_ARTIFACT_NAME}"
      - name: Setup environment
        run: |
          curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=666 sh -
          cat /etc/rancher/k3s/k3s.yaml
          mkdir -p ~/.kube
          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          chmod 600 ~/.kube/config
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.get_artifact_name.outputs.IMAGE_ARTIFACT_NAME }}-image
      - name: Load image into cluster
        run: sudo k3s ctr images import "${GITHUB_WORKSPACE}/${ARTIFACT}.tar"
        env:
          ARTIFACT: ${{ steps.get_artifact_name.outputs.IMAGE_ARTIFACT_NAME }}
      - name: Test environment
        run: |
          kubectl cluster-info
      - name: Run scripts
        run: |
          ./scripts/ci/e2e/test-provider-consumer.sh
