name: CI

on:
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.head_ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ secrets.IMAGE_REGISTRY }}
  OWNER: ${{ secrets.REPO_USER }}

jobs:
  style:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
       distribution: 'temurin'
       java-version: 17
       cache: 'maven'
    - name: Run style checks
      run: mvn -B -U checkstyle:check --file pom.xml

  license:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
       distribution: 'temurin'
       java-version: 17
       cache: 'maven'
    - name: Run license checks
      run: mvn -B -U license:check --file pom.xml

  linting:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Lint Docker
      uses: hadolint/hadolint-action@v1.5.0
      with:
        dockerfile: Dockerfile
        config: .hadolint.yaml

  static-code-analysis:
    needs: [style, license, linting]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
       distribution: 'temurin'
       java-version: 17
       cache: 'maven'
    - name: Run static code analysis
      run: mvn -B -U compile spotbugs:check --file pom.xml

  unit-and-integration-tests:
    needs: [style, license, linting]
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [17]

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
       distribution: 'temurin'
       java-version: 17
       cache: 'maven'
    - name: Unit- and Integrationtests
      run: mvn -B -U verify --file pom.xml -Prelease

  mutation-tests:
    needs: unit-and-integration-tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
       distribution: 'temurin'
       java-version: 17
       cache: 'maven'
    - name: Run Mutation Tests
      run: mvn -B -U -Dmaven.javadoc.skip=true test org.pitest:pitest-maven:mutationCoverage --file pom.xml

  build-test-image:
    needs: unit-and-integration-tests
    timeout-minutes: 15
    runs-on: ubuntu-latest
    concurrency:
      group: e2e
    strategy:
      fail-fast: false

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Build registry path
        id: get_repo
        run: echo ::set-output name=IMAGE::"$REGISTRY/$OWNER/dataspace-connector"
      - name: Login to registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: |
          docker build . -t $IMAGE:ci
        env:
          IMAGE: ${{ steps.get_repo.outputs.IMAGE }}
          DOCKER_BUILDKIT: 1
      - name: Push image
        run: docker push $IMAGE:ci
        env:
          IMAGE: ${{ steps.get_repo.outputs.IMAGE }}

  image-security-scan:
    needs: build-test-image
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Build registry path
        id: get_repo
        run: echo ::set-output name=IMAGE::"$REGISTRY/$OWNER/dataspace-connector"
      - name: Run vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.get_repo.outputs.IMAGE }}:ci'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os, library'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

  e2e-test:
    needs: build-test-image
    timeout-minutes: 30
    runs-on: ubuntu-latest
    concurrency:
      group: e2e

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup environment
        run: |
          curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE=666 sh -
          cat /etc/rancher/k3s/k3s.yaml
          mkdir -p ~/.kube
          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          chmod 600 ~/.kube/config
      - name: Test environment
        run: |
          kubectl cluster-info
      - name: Run scripts
        run: |
          ./scripts/ci/e2e/test-provider-consumer.sh
